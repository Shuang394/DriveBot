/** Handle the user message.
 * @param {string} payload the message sent by user
 * @param {AppState} state the state of the app
 * @param {Tool} tools available tools to perform a task
 */

async function run(payload, state, tools) {
  if (state.number == null){
    //Language chosen unknown yet
   num = await userPick(payload, tools, 1);
   state.number = 1;

   test = await testtype(payload, tools, num);
   //stritly no touching
    if ( num == null){
      state.number = null;
    }
   return;
  }
  
  if (state.number == 1){
  var number = await userPick(payload, tools, 2);
  state.number = 2;
  if (number == null){
    return;
  }
  combi = num.toString() + number.toString()
  }
  //tools.reply(num.toString() + number.toString());


  /* pest control code
  let test = state.num;
  if (typeof test !== "undefined") {
    tools.reply(test.toString());
  } else {
    tools.reply("test is undefined");
  }
  */

  switch (combi) {
  case '11':
    // English
    tools.reply(await tools.DriveBot_En({message: payload,}, {memory: tools.getChatHistory(500)}));

    break;
  case '21':
    // Malay
    tools.reply(await tools.DriveBot_My({message: payload,}, {memory: tools.getChatHistory(500)}));
    setInterval(async function (){
      tools.reply(await tools.DriveBot_My({message: payload,}, {memory: tools.getChatHistory(500)}));
    }, 
    1000000)
    break;
  case '31':
    // Chinese
    tools.reply(await tools.DriveBot_Cn({message: payload,}, {memory: tools.getChatHistory(500)}));
    setInterval(async function (){
      tools.reply(await tools.DriveBot_Cn({message: payload,}, {memory: tools.getChatHistory(500)}));
    }, 
    1000000)
    break;
  case '41':
    // Tamil
    tools.reply(await tools.DriveBot_Tm({message: payload,}, {memory: tools.getChatHistory(500)}));
    setInterval(async function (){
      tools.reply(await tools.DriveBot_Tm({message: payload,}, {memory: tools.getChatHistory(500)}));
    }, 
    1000000)
    break;
  case '12':
    // English
    tools.reply(await tools.DriveBot_EnFTT({message: payload,}, {memory: tools.getChatHistory(500)}));
    setInterval(async function (){
      tools.reply(await tools.DriveBot_En({message: payload,}, {memory: tools.getChatHistory(500)}));
    }, 
    1000000)
    break;
  case '22':
    // Malay
    tools.reply(await tools.DriveBot_MyFTT({message: payload,}, {memory: tools.getChatHistory(500)}));
    setInterval(async function (){
      tools.reply(await tools.DriveBot_MyFTT({message: payload,}, {memory: tools.getChatHistory(500)}));
    }, 
    1000000)
    break;
  case '32':
    // Chinese
    tools.reply(await tools.DriveBot_CnFTT({message: payload,}, {memory: tools.getChatHistory(500)}));
    setInterval(async function (){
      tools.reply(await tools.DriveBot_CnFTT({message: payload,}, {memory: tools.getChatHistory(500)}));
    }, 
    1000000)
    break;
  case '42':
    // Tamil
    tools.reply(await tools.DriveBot_TmFTT({message: payload,}, {memory: tools.getChatHistory(500)}));
    setInterval(async function (){
      tools.reply(await tools.DriveBot_TmFTT({message: payload,}, {memory: tools.getChatHistory(500)}));
    }, 
    1000000)
    break;
  default:
    return;
}

}

async function externaltools(payload, tools){
  const parsed = JSON.parse(await tools.DriveBot_En({message: payload,}, {memory: tools.getChatHistory(500)},
    {externalTool: {
      "prompt" : (arguments) =>{
          const prompts = JSON.parse(arguments).expression;
          return prompts
    }}}))
    console.log(parsed); // the function_call object
    const arguments = JSON.parse(parsed.function_call.arguments);
    return arguments;
}
async function testtype(payload, tools, num){

  switch(num){
    case 1:
        tools.reply(`Which Theory test would you like to practice?
      1) Basic Theory Test (BTT)
      2) Final Theory Test (FTT)`
      );

      value = await userPick(payload, tools, 2);
 
      return num + value;
      break;
    case 2:
        tools.reply(`Ujian Teori yang anda ingin latih mana
      1) Ujian Teori Asas (BTT)
      2) Ujian Teori Akhir (FTT)`
    );
    break;
    case 3:
        tools.reply(`您想练习哪种理论考试？
      1) 基本理论考试 (BTT)
      2) 最终理论考试 (FTT)`
    );
    break;
    case 4:
      tools.reply(`நீங்கள் எப்படி தொழுத்து சோதித்துக்கொள்ள விரும்புகிறீர்கள்?
    1) அடிப்படை தொழுத்து சோதித்தல் (BTT)
    2) இறுதித் தொழுத்து சோதித்தல் (FTT)`
    );
    break;
  }


}
//Picking options
async function userPick(payload, tools, stage) {
  const { number } = JSON.parse(
    await tools.ParseNumber({
      hint: `User's input: ${payload}`,
      message: payload,
    })
  );
  
  if (stage == 1){
    if (number < 1 || number > 4) {
      tools.reply(`"${payload}" is not an availble option, please select one of The available options.`);
      return null;
    }
  }

  if (stage == 2){
        if (number < 1 || number > 2) {
      tools.reply(`"${payload}" is not an availble option, please select one of The available options.`);
      return null;
    }
  }

  return number;
}

/** Startup.
 * @param {AppState} state the state of the app
 * @param {Tool} tools available tools to perform a task
 */
async function startup(state, tools) {
  state.number = null;
  state.num = null;
  tools.reply(`Hello, I am your theory tester, DriveBot! What language would you prefer to take the test in?
  1) English
  2) Bahasa Malayu
  3) 中文
  4) தமிழ்`);
}

/** Unit test.
 * @param {Test} test define a test case
 * @param {Tool} tools available tools to perform a task
 */
function unitTest(test, tools) {
  test("Test 1", 1, async (expect) => {
    expect(true).toBeTrue();
  });
}
